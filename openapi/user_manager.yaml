openapi: 3.0.3
info:
  contact:
    email: lars@lgblaumeiser.de
    name: lgblaumeiser
  description: Description of a user manager API
  license:
    name: MIT
  title: User Manager API
  version: 1.0.0
servers:
- description: User manager currently runs typically locally on the host machine
  url: http://localhost:19749
paths:
  /users:
    delete:
      operationId: deleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleUserData'
        description: Field username is required
        required: true
      responses:
        "204":
          description: Resource deleted successfully
        "401":
          description: User not authorized
        "403":
          description: Admin access needed for this operation
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      security:
      - BearerAuth:
        - admin
      summary: Delete a user and all its data from the database
      tags:
      - users
    patch:
      operationId: changeRoles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeRoleData'
        description: Field username is optional, if not given, token id is used, newroles
          and obsroles are optional, but should in total contain at least one element
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
          description: Roles successfully changed
        "400":
          content:
            text/plain; charset=utf-8:
              schema:
                example: Request body did not contain valid data, request failed
                type: string
          description: Bad data given to the request, returns an adequate error message
        "401":
          description: User not authorized
        "403":
          description: Admin access needed for this operation
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      security:
      - BearerAuth: []
      summary: Change roles of user, admin roles can only be changed by an admin
      tags:
      - users
    post:
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserData'
        description: Fields username and password are required, roles is optional
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
          description: User successfully created
        "400":
          content:
            text/plain; charset=utf-8:
              schema:
                example: Request body did not contain valid data, request failed
                type: string
          description: Bad data given to the request, returns an adequate error message
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      summary: Register a new user, needs no authentication, user will get usermanager_user
        role
      tags:
      - users
    put:
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthData'
        description: Fields username and password are required, password contains
          new password
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
          description: Password successfully changed
        "400":
          content:
            text/plain; charset=utf-8:
              schema:
                example: Request body did not contain valid data, request failed
                type: string
          description: Bad data given to the request, returns an adequate error message
        "401":
          description: User not authorized
        "403":
          description: Admin access needed for this operation
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      security:
      - BearerAuth: []
      summary: Change the password of the user, authentication provided either by
        token of user or of an admin
      tags:
      - users
  /users/authenticate:
    post:
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthData'
        description: Field username and password are required, rest is ignored
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResult'
          description: User authenticated, required access token and refresh token
            returned
        "400":
          content:
            text/plain; charset=utf-8:
              schema:
                example: Request body did not contain valid data, request failed
                type: string
          description: Bad data given to the request, returns an adequate error message
        "401":
          description: User not authorized
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      summary: Authenticate a registered user by password, returns an access token
        valid for 30 minutes and a refresh token valid for 2 weeks
      tags:
      - users
  /users/token:
    get:
      operationId: refreshToken
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResult'
          description: Refreshed access and refresh token
        "401":
          description: User not authorized
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      security:
      - BearerAuth: []
      summary: With the use of the old access token or the refresh token aquire a
        new access token, refresh token will be restarted as well
      tags:
      - users
    put:
      operationId: invalidateToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthData'
        description: Field username is required, either password is given or the request
          has an access token from an admin
        required: true
      responses:
        "204":
          description: The refresh token has been invalidated
        "400":
          content:
            text/plain; charset=utf-8:
              schema:
                example: Request body did not contain valid data, request failed
                type: string
          description: Bad data given to the request, returns an adequate error message
        "401":
          description: User not authorized
        "403":
          description: Admin access needed for this operation
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      security:
      - BearerAuth:
        - admin
      summary: Invalidate refresh token, in case token has been leaked and the usage
        has to be prevented, uses user, password authentication of the user or an
        admin token
      tags:
      - users
  /backup:
    get:
      operationId: backup
      responses:
        "200":
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: A backup of the database data as zip byte stream
        "401":
          description: User not authorized
        "403":
          description: Admin access needed for this operation
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      security:
      - BearerAuth:
        - admin
      summary: Create a backup of the database
      tags:
      - infrastructure
    put:
      operationId: restore
      requestBody:
        content:
          application/zip:
            schema:
              format: binary
              type: string
        description: The data to restore in the database
        required: true
      responses:
        "204":
          description: Database restored successfully, old data deleted
        "400":
          content:
            text/plain; charset=utf-8:
              schema:
                example: Request body did not contain valid data, request failed
                type: string
          description: Bad data given to the request, returns an adequate error message
        "401":
          description: User not authorized
        "403":
          description: Admin access needed for this operation
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      security:
      - BearerAuth:
        - admin
      summary: Restore a backup and replace existing database, old date will be deleted
      tags:
      - infrastructure
  /licenses:
    get:
      operationId: license
      responses:
        "200":
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
          description: The attribution information as text
        "500":
          content:
            text/plain; charset=utf-8:
              schema:
                example: An io error occured, request failed
                type: string
          description: The request resulted in an unexpected exception, returns an
            adequate error message
      summary: Returns the attribution information on the used Open Source Software
      tags:
      - infrastructure
components:
  responses:
    SuccessfullyDeleted:
      description: Resource deleted successfully
    Unauthorized:
      description: User not authorized
    BadRequest:
      content:
        text/plain; charset=utf-8:
          schema:
            example: Request body did not contain valid data, request failed
            type: string
      description: Bad data given to the request, returns an adequate error message
    AdminAccess:
      description: Admin access needed for this operation
    InternalError:
      content:
        text/plain; charset=utf-8:
          schema:
            example: An io error occured, request failed
            type: string
      description: The request resulted in an unexpected exception, returns an adequate
        error message
  schemas:
    AuthData:
      example:
        password: $0MeP@sswOrD
        username: my_username
      properties:
        username:
          description: An unique identifier for the user
          example: my_username
          type: string
        password:
          description: The password for the user
          example: $0MeP@sswOrD
          format: password
          type: string
      type: object
    NewUserData:
      example:
        password: $0MeP@sswOrD
        addroles:
        - '["tool_user","tool_admin"]'
        - '["tool_user","tool_admin"]'
        username: my_username
      properties:
        username:
          description: An unique identifier for the user
          example: my_username
          type: string
        password:
          description: The password for the user
          example: $0MeP@sswOrD
          format: password
          type: string
        addroles:
          items:
            example: '["tool_user","tool_admin"]'
            type: string
          type: array
    SimpleUserData:
      example:
        username: my_username
      properties:
        username:
          description: An unique identifier for the user
          example: my_username
          type: string
      type: object
    ChangeRoleData:
      example:
        removeroles:
        - '["tool_user","tool_admin"]'
        - '["tool_user","tool_admin"]'
        addroles:
        - '["tool_user","tool_admin"]'
        - '["tool_user","tool_admin"]'
        username: my_username
      properties:
        username:
          description: An unique identifier for the user
          example: my_username
          type: string
        addroles:
          items:
            example: '["tool_user","tool_admin"]'
            type: string
          type: array
        removeroles:
          items:
            example: '["tool_user","tool_admin"]'
            type: string
          type: array
      type: object
    UserId:
      example:
        username: my_username
      properties:
        username:
          description: An unique identifier for the user
          example: my_username
          type: string
      type: object
    TokenResult:
      example:
        access_token: access_token
        refresh_token: refresh_token
      properties:
        access_token:
          description: A valid token
          format: byte
          type: string
        refresh_token:
          description: A valid token
          format: byte
          type: string
      type: object
    Username:
      description: An unique identifier for the user
      example: my_username
      type: string
    Password:
      description: The password for the user
      example: $0MeP@sswOrD
      format: password
      type: string
    Token:
      description: A valid token
      format: byte
      type: string
    RoleList:
      items:
        example: '["tool_user","tool_admin"]'
        type: string
      type: array
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
