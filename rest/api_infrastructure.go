/*
 * User Manager API
 *
 * Description of a user manager API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package rest

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// InfrastructureApiController binds http requests to an api service and writes the service results to the http response
type InfrastructureApiController struct {
	service InfrastructureApiServicer
	errorHandler ErrorHandler
}

// InfrastructureApiOption for how the controller is set up.
type InfrastructureApiOption func(*InfrastructureApiController)

// WithInfrastructureApiErrorHandler inject ErrorHandler into controller
func WithInfrastructureApiErrorHandler(h ErrorHandler) InfrastructureApiOption {
	return func(c *InfrastructureApiController) {
		c.errorHandler = h
	}
}

// NewInfrastructureApiController creates a default api controller
func NewInfrastructureApiController(s InfrastructureApiServicer, opts ...InfrastructureApiOption) Router {
	controller := &InfrastructureApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the InfrastructureApiController
func (c *InfrastructureApiController) Routes() Routes {
	return Routes{ 
		{
			"Backup",
			strings.ToUpper("Get"),
			"/backup",
			c.Backup,
		},
		{
			"License",
			strings.ToUpper("Get"),
			"/licenses",
			c.License,
		},
		{
			"Restore",
			strings.ToUpper("Put"),
			"/backup",
			c.Restore,
		},
	}
}

// Backup - Create a backup of the database
func (c *InfrastructureApiController) Backup(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Backup(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// License - Returns the attribution information on the used Open Source Software
func (c *InfrastructureApiController) License(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.License(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Restore - Restore a backup and replace existing database
func (c *InfrastructureApiController) Restore(w http.ResponseWriter, r *http.Request) {
	bodyParam := *os.File{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.Restore(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
